{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","query","filter","this","props","todos","userId","selectUser","visibleTodos","todo","completed","title","toLowerCase","includes","className","type","id","placeholder","onChange","event","setState","target","value","name","map","classNames","checked","readOnly","onClick","React","Component","request","url","fetch","then","res","ok","Error","status","statusText","json","CurrentUser","selectedUser","loadUser","prevProps","a","userID","email","phone","onClear","App","selectedUserId","clearCurrentUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.27bd17f2.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[],\n  userId: number,\n  selectUser: (userId: number) => void,\n};\n\ntype State = {\n  query: string,\n  filter: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    query: '',\n    filter: '',\n  };\n\n  render() {\n    const { query, filter } = this.state;\n    const { todos, userId, selectUser } = this.props;\n\n    const visibleTodos = todos.filter(todo => {\n      if (filter === 'active') {\n        return !todo.completed\n        && todo.title.toLowerCase().includes(query.toLowerCase());\n      }\n\n      if (filter === 'completed') {\n        return todo.completed\n        && todo.title.toLowerCase().includes(query.toLowerCase());\n      }\n\n      return todo.title.toLowerCase().includes(query.toLowerCase());\n    });\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__filter\">\n          <input\n            type=\"text\"\n            id=\"search-query\"\n            className=\"TodoList__filter-item\"\n            placeholder=\"Type search word\"\n            onChange={(event) => {\n              this.setState({\n                query: event.target.value,\n              });\n            }}\n          />\n          <select\n            name=\"filter\"\n            value={this.state.filter}\n            className=\"TodoList__filter-item\"\n            onChange={(event) => {\n              this.setState({ filter: event.target.value });\n            }}\n          >\n            <option value=\"all\">\n              Show all\n            </option>\n            <option value=\"active\">\n              Show active\n            </option>\n            <option value=\"completed\">\n              Show completed\n            </option>\n          </select>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {visibleTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--unchecked': !todo.completed },\n                  { 'TodoList__item--checked': todo.completed },\n                )}\n              >\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n                <button\n                  type=\"button\"\n                  className={classNames(\n                    'button',\n                    'TodoList__user-button',\n                    { 'TodoList__user-button--selected': userId === todo.userId },\n                  )}\n                  onClick={() => selectUser(todo.userId)}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const BASE_URL = 'https://mate.academy/students-api/';\n\nconst request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status}-${res.statusText}`);\n      }\n\n      return res.json();\n    });\n};\n\nexport const getTodos = () => {\n  return request('todos');\n};\n\nexport const getUser = (userID: number) => {\n  return request(`users/${userID}`);\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\ntype Props = {\n  userId: number,\n  onClear: () => void,\n};\n\ntype State = {\n  selectedUser: User | null,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    selectedUser: null,\n  };\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUser();\n    }\n  }\n\n  async loadUser() {\n    const selectedUser = await getUser(this.props.userId);\n\n    this.setState({ selectedUser });\n  }\n\n  render() {\n    const { selectedUser } = this.state;\n\n    return (\n      <>\n        {selectedUser && (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:&nbsp;\n                {selectedUser.id}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n            <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n            <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n\n            <button\n              type=\"button\"\n              className=\"button CurrentUser__clear\"\n              onClick={this.props.onClear}\n            >\n              Clear\n            </button>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\ninterface State {\n  todos: Todo[];\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  clearCurrentUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            userId={selectedUserId}\n            selectUser={(userId: number) => {\n              this.setState({ selectedUserId: userId });\n            }}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onClear={this.clearCurrentUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}